git -rf name  //删除本地仓库

cat主要有三大功能：
1.一次显示整个文件。 cat filename
2.从键盘创建一个文件。 cat > filename  
   只能创建新文件,不能编辑已有文件.
3.将几个文件合并为一个文件：cat file1 file2 > file

要查看当前配置有哪些远程仓库,可以用 git remote 命令

git add .   //添加所有的文件

**********************************************************************

git log命令显示从最近到最远的提交日志
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：


 Command line instructions
Git global setup  //

git config --global user.name "heleihong"
git config --global user.email "heleihong@sensetime.com"

Create a new repository

mkdir AndroidSS
cd AndroidSS
git init
touch README.md
git add README.md
git commit -m "first commit"
git remote add origin git@gitlab.hk.sensetime.com:heleihong/testhk.git
git push -u origin master

Push an existing Git repository

cd existing_git_repo
git remote add origin git@gitlab.hk.sensetime.com:heleihong/testhk.git
git push -u origin master
******************************************

git remote add origin git@gitlab.hk.sensetime.com:zhouaichun/image_sdk_tmp.git

git@gitlab.sz.sensetime.com:heleihong/sample1.git

git remote add origin git@gitlab.sz.sensetime.com:heleihong/sample1.git//关联本地和远程仓库

git push -u origin master   //将master推送到远程仓库

先抓取然后才能推送

git fetch origin

 git merge origin/master  //合并

git remote 不带参数，列出已经存在的远程分支，例如：
#git remote
origin_apps

git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，例如：
#git remote -v
origin_apps     gitolite@scm:apps/Welcome.git (fetch)
origin_apps     gitolite@scm:apps/Welcome.git (push)
需要注意的是，如果有子命令，-v | --verbose需要放在git remote与子命令中间。

git remote add name url 在url创建名字为name的仓库（Adds a remote named <name> for the repository at <url>）
name为远程仓库的名字

git remote show name 必须要带name，否则git remote show的作用就是git remote，给出remote name的信息。 

//第一次从服务器下载代码  git pull origin master

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场

//new function
开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。



